一、字典
	1、创建和使用字典
		a、	book = {'a':1,'b':2}
		b、	item = [('a', 1), ('b', 2)]
			dict(item)
		c、	>>> zip(('a', 1), ('b', 2))
			[('a', 'b'), (1, 2)
			>>> dict(zip(('a', 1), ('b', 2)))
			{'a': 'b', 1: 2}
	2、基本字典操作
		a、	len(d) 返回d中项（键-值对的数量）
		b、	d[k] 返回关联到键k上的值
		c、 d[k] = v 将值v关联到键k上。相当于赋值
		d、	del d[k] 删除键为k的项
		e、	k in d 检查d中是否还有键为k的项

		键可以是任意不可变的类型。比如浮点型 字符串 元组。键是唯一的，值并不唯一

		即使键期初在字典中并不存在，也可以赋值（列表就不行）

		k in d （d为字典）查找的是键，而不是值

	3、字典的格式化字符串
		>>> dic
		{'a': 'b', 1: 2}
		>>> "how are you %(a)s" % dic
		'how are you b'

	4、	字典方法
		a、ckear() 清除字典中所有的项。这个是原地操作类似于list.sort 所以无返回值。或者说返回None
			>>> dic
			{'a': 'b', 1: 2}
			>>> dic.clear()
			>>> dic
			{}

			为什么这个方法有用呢如下：
			>>> x = {}
			>>> y = x
			>>> x['key'] = 'value'
			>>> x
			{'key': 'value'}
			>>> y
			{'key': 'value'}
			>>> x = {}
			>>> x
			{}
			>>> y
			{'key': 'value'}


			>>> x = {}
			>>> y = x
			>>> x
			>>> x['key'] = 'value'
			>>> x
			{'key': 'value'}
			>>> y
			{'key': 'value'}
			>>> x.clear()
			>>> y
			{}
			>>> x
			{}
		b、	copy() 返回一个具有相同键-值对的新字典。（这个方法实现的是浅复制，因为值本身就是相同的而不是副本）
			深复制，复制其包含的所有值。可以使用copy模块的deepcopy来完成

			>>> a = {1:2,3:4,5:[55,555]}
			>>> b = a.copy()
			>>> b
			{1: 2, 3: 4, 5: [55, 555]}
			>>> b[1] = 11
			>>> b
			{1: 11, 3: 4, 5: [55, 555]}
			>>> a
			{1: 2, 3: 4, 5: [55, 555]}   a没有变

			>>> a
			{1: 2, 3: 4, 5: [55, 555]}
			>>> b = a.copy()
			>>> b
			{1: 2, 3: 4, 5: [55, 555]}
			>>> b[5][0] = 66
			>>> b
			{1: 2, 3: 4, 5: [66, 555]}   b和a都变了。操作的是5对应的列表值
			>>> a
			{1: 2, 3: 4, 5: [66, 555]}

			深copy:
			>>> from copy import deepcopy
			>>> a = {1:2,3:4,5:[55,555]}
			>>> b = a.copy()
			>>> ab = deepcopy(a)
			>>> b[5][0] = 66
			>>> a
			{1: 2, 3: 4, 5: [66, 555]}
			>>> b
			{1: 2, 3: 4, 5: [66, 555]}
			>>> ab
			{1: 2, 3: 4, 5: [55, 555]}

		c、	fromkeys() 使用给定的键建立新字典。每个键对应一个默认的值None
			>>> {}.fromkeys(['name','age'])
			{'age': None, 'name': None}
		d、	get方法是个更宽松的访问字典项的方法。一般来说，如果视图访问字典中不存在的项时会出错
			>>> d = {}
			>>> print d['name']
			Traceback (most recent call last):
			  File "<stdin>", line 1, in <module>
			KeyError: 'name'
			>>> print d.get('name')
			None
			还可以自定义默认值，替换None
			>>> d.get('name','N/A')
			'N/A'

			如果键存在，get用起来就像普通的字典查询一样
			>>> d['name'] = 'jinnery'
			>>> d.get('name')
			'jinnery'
		e、	has_key() 方法可以检查字典中是否含有特定的键。表达式d.has_key(k)相当于表达式k in d
			使用哪个方式很大程度上取决于个人的喜好。
		f、	items() 方法将字典所有的项以列表方式返回。列表中的每一项都表示为（键，值）对的形式。但是项在返回时并没有遵循特定的次序。
			iteritems()方法的作用大致相同，但是返回一个迭代器对象而不是列表。
			>>> d.items()
			[('name', 'jinnery')]
			>>> d.iteritems()
			<dictionary-itemiterator object at 0x7f0fb25c5af8>
			>>> b = d.iteritems()
			>>> b
			<dictionary-itemiterator object at 0x7f0fb25c5b50>
			>>> list( d.iteritems() )
			[('name', 'jinnery')]
		g、	keys方法将字典中的键以列表形式返回。而iterkeys则返回针对键的迭代器
		h、	pop方法用来获得对应于给定键的值，然后将这个键-值对从字典中移出
			>>> a
			{1: 2, 3: 4}
			>>> a.pop(1)
			2
			>>> a
			{3: 4}
		i、	popitem() 方法类似于list.pop  list.pop弹出列表的最后一个元素。popitem弹出随机项。因为字典是无序的，并没有最后一个元素的说法
			若想一个一个的移出并处理项。这个方法非常有效了。

		j、	setdefault() 方法再某种程度上类似于get方法。能够获得与给定键相关联的值。除此之外setdefault还能在字典中不含
			给定键的情况下设定相应的键值
			>>> d = {}
			>>> d.setdefault('name','N/A')
			'N/A'
			>>> d
			{'name': 'N/A'}
			>>> d['name'] = 'Jinnery'
			>>> d.setdefault('name','N/A')
			'Jinnery'
			>>> d
			{'name': 'Jinnery'}
		k、	update()方法可以利用一个字典项更新另一个字典
			>>> d
			{'name': 'Jinnery'}
			>>> e = {1:2}
			>>> d.update(e)
			>>> d
			{1: 2, 'name': 'Jinnery'}
		L、	values和itervalues values方法以列表的形式返回字典中的值。itervalues返回值的迭代器。

		