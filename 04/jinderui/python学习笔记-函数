作用域：
	原则-LGB  L-local G-global B-xxx（忘记了）
	尽量不要在函数内部定义 全局函数global
	通过global关键字可以在函数内部声明全局函数。不建议这样做



函数：
	1、位置参数
		实参和形参位置一一对应。
	2、默认参数
		对于一些函数，你可能希望它的一些参数是 可选 的，如果用户不想要为这些参数提供值的话，这些参数就使用默认值。这个功能借助于默认参数值完成。你可以在函数定义的形参名后加上赋值运算符（=）和默认值，从而给形参指定默认参数值
		
		只有在形参表末尾的那些参数可以有默认参数值，即你不能在声明函数形参的时候，先声明有默认值的形参而后声明没有默认值的形参。
		这是因为赋给形参的值是根据位置而赋值的。例如，def func(a, b=5)是有效的，但是def func(a=5, b)是 无效 的。顺序是从右向左

	3、关键参数
		如果你的某个函数有许多参数，而你只想指定其中的一部分，那么你可以通过命名来为这些参数赋值——这被称作 关键参数 我们使用名字（关键字）而不是位置（我们前面所一直使用的方法）来给函数指定实参。
		这样做有两个 优势，一、由于我们不必担心参数的顺序，使用函数变得更加简单了。二、假设其他参数都有默认值，我们可以只给我们想要的那些参数赋值

	4、收集参数
		* --元组
		** --字典
		def num(**s):
			return s
		print num(a=1,c=2)   #里面定义的是关键参数可以定义多个 x=xx 
		结果{'a': 1, 'c': 2}

		def num(*s):
			return s
		print num(1,2,3)
		结果(1, 2, 3)

		逆过程：
		def num(a=1,b=2):
			return a,b
		a = {'a':2,'b':4}
		print num(a)
		结果({'a': 2, 'b': 4}, 2)


		def num(a=1,b=2):
			return a,b

		a = {'a':2,'b':4}
		print num(**a)
		定义的参数名 a b 要和num里面定义的一样。传递的个数也要一样
		结果(2, 4)

	5、参数：
			(参数在函数定义的圆括号对内指定，用逗号分割。当我们调用函数的时候，我们以同样的方式提供值。注意我们使用过的术语——函数中的参数名称为 形参 而你提供给函数调用的值称为 实参 )
			形参:函数中的参数名称为 形参
			实参:而你提供给函数调用的值称为 实参
	6、递归函数
	只要符合递归的两个条件，都可以使用。
	1. 参数必须有最后默认结果，比如if n==0
	2. 参数必须向默认结果收敛，factorial(n-1)
	比如求阶层，求和，递归一个目录等。
	
	
	import os,sys

	def print_files(path):
		lsdir = os.listdir(path)  #拿到一个列表
		dirs = [i for i in lsdir if os.path.isdir(os.path.join(path,i))] #用列表推导式产生一个新的
		files = [i for i in lsdir if os.path.isfile(os.path.join(path,i))]
	
		if files:
			for f in files:
				print os.path.join(path,f)
		if dirs:
			for d in dirs:
				print_files(os.path.join(path,d))  #递归调用自己
	print_files(sys.argv[1])
