序列是一种数据结构，它包含的元素都进行了变化（从0开始）典型的序列包含：列表、字符串、元组。其中列表是可变的。可以进行修改的。
而元组和字符串是不可变的。一旦创建了就是固定的。

一、列表 list
	1、列表定义方式 
		a、range(10)  				只能是正数
		b、list('hello')			只能是字符串
	2、判断成员是否在列表里面
		a、in
	3、计算列表长度
		a、len()
	4、帮助使用
		a、dir()
		b、help()
	5、最大值，最小值
		a、max()
		b、min()
	6、索引（从0开始）
		a、>>> test = 'hello'
		   >>> test[0]
           'h'
        b、>>> test = 'hello'
		   >>> test[-1]
           'o'

    7、分片list(star:end:step)
    	a、>>> numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
		   >>> numbers[3:6]   （从0开始计算，不包含end）
		   [4, 5, 6]
		   >>> numbers[3:-1]
		   [4, 5, 6, 7, 8, 9]

		   只要分片最左边的索引比它右边的晚出现在序列中。结果就是一个空序列
		   >>> numbers[-3:0]
		   []
		   >>> numbers[-3:1]
		   []

		   如果分片所得部分包括序列结尾的元素，那么，只需要置空最后一个索引即可
		   >>> numbers[-3:]
		   [8, 9, 10]

		   >>> numbers[:3]
		   [1, 2, 3]

		   如果需要复制整个序列，可以将两个索引都置空
		   >>> numbers[:]
		   [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

		   偶数
		   >>> a[0::2]
		   [0, 2, 4, 6, 8, 10]

		   在使用一个负数作为步长时，必须让开始点（开始索引）大于结束点。
		   对于一个正数步长，Python会从序列的头部开始向右提取元素，直到最后一个元素。
		   而对于负数步长，则从序列的尾部开始向左提取元素，直到第一个元素
		   >>> a[10:1:-2]
		   [10, 8, 6, 4, 2]

		   奇数
		   >>> a[1:10:2]
           [1, 3, 5, 7, 9]

    8、序列相加 两种类型的序列才可以相加
           >>> [1,2,3]+[4,5,6]
           [1, 2, 3, 4, 5, 6]

    9、序列相乘
		   >>> 'python' * 3
           'pythonpythonpython'
    10、基本列表操作
    	a、赋值
	    	>>> x = [1,1,1]
		    >>> x[1] = 2
			>>> x
			[1, 2, 1]

		b、删除元素（del通过所以删除值）
			[1, 2, 1]
			>>> del x[2]
			>>> x
			[1, 2

		c、分片赋值
			>>> name = list('Perl')
			>>> name
			['P', 'e', 'r', 'l']
			>>> name[2:] = list('ar')
			>>> name
			['P', 'e', 'a', 'r']

			以下结果一样
			>>> name = list('Perl')
			>>> name
			['P', 'e', 'r', 'l']
			>>> name[2:]='ar'
			>>> name
			['P', 'e', 'a', 'r']

			赋值 str 和int 区别
			>>> name
			['P', 'e', 'a', 'r']
			>>> name[2:]=list(10)
			Traceback (most recent call last):
			  File "<stdin>", line 1, in <module>
			TypeError: 'int' object is not iterable
			>>> name[2:]=list('10')
			>>> name
			['P', 'e', '1', '0']
			>>> name[2:]=[10]
			>>> name
			['P', 'e', 10]
			>>> name[2:]=['ar']
			>>> name
			['P', 'e', 'ar']

			可以使用与原序列不等长的序列将分片替换
			>>> name = list('Perl')
			>>> name
			['P', 'e', 'r', 'l']
			>>> name[1:] = list('ython')
			>>> name
			['P', 'y', 't', 'h', 'o', 'n']

			分片赋值语句可以在不需要替换任何元素的情况下插入新的元素
			>>> numbers = [1,5]
			>>> numbers
			[1, 5]
			>>> numbers[1:1] = [2,3,4]
			>>> numbers
			[1, 2, 3, 4, 5]

			通过分片赋值删除元素
			>>> numbers
			[1, 2, 3, 4, 5]
			>>> numbers[1:4]
			[2, 3, 4]
			>>> numbers[1:4]=[]
			>>> numbers
			[1, 5]

			del和通过分片赋值都可以清空一个列表。不同的是del 可以删除一个列表
			>>> numbers[:]
			[1, 5]
			>>> numbers[:]=[]
			>>> numbers
			[]
			>>> numbers = [1,2,3,4]
			>>> del numbers
			>>> numbers（删除以后再运行报错）
			Traceback (most recent call last):
			  File "<stdin>", line 1, in <module>
			NameError: name 'numbers' is not defined
			>>> numbers = [1,2,3,4]
			>>> del numbers[:]
			>>> numbers
			[]
	11、列表方法
		a、append() 在列表末尾追加新的对象
			>>> lst = [1,2,3]
			>>> lst.append(4)
			>>> lst
			[1, 2, 3, 4]

			相当于：a[len(lst):] = [x]
		b、count() 统计某个元素在列表中出现的次数
			>>> num = [1,1,2,3,3,4,4,1,1]
			>>> num.count(1)
			4	
		c、extend() 在列表末尾一次性追加另一个序列中的对个值--新列表扩展原有列表
			>>> a = [1,2,3]
			>>> b = [4,5,6]
			>>> a.extend(b)
			>>> a
			[1, 2, 3, 4, 5, 6]
			>>> b
			[4, 5, 6]

			和两个列表相加区别在于：extend方法修改了被扩展的序列。而原始的连接操作则不变。它会返回一个全新的列表
			>>> a = [1,2,3]
			>>> b = [4,5,6]
			>>> a + b
			[1, 2, 3, 4, 5, 6]
			>>> a
			[1, 2, 3]
			>>> b
			[4, 5, 6]
		d、index() index方法用于从列表中找出某个值第一个匹配项的索引位置（如果要查找的元素在列表中没有就会报错）
			>>> a = [1,2,3,4]
			>>> a.index(3)
			2

			拿到列表中
			>>> for i,k in enumerate(a):
			...     if k == 1:
			...         print i,k
			... 
			0 1
			1 1
			2 1
			7 1
			11 1
		e、insert() 方法用于将对象插入到列表中
		    >>> a
			[1, 2, 3, 4]
			>>> a.insert(10,100)
			>>> a
			[1, 2, 3, 4, 100]
			>>> a.insert(1,55)
			>>> a
			[1, 55, 2, 3, 4, 100]
		f、pop() 移出列表中的有一个元素（默认最后一个）并且返回该元素的值  a.append(a.pop())
			>>> a = [1,2,3]
			>>> a
			[1, 2, 3]
			>>> a.pop()
			3
			>>> a
			[1, 2]
			>>> a.pop(0)
			1
			>>> a
			[2]
		g、remove() 方法用于移出列表中的某个值的第一个匹配项（不存在列表中的值会报错）
			>>> a
			[1, 2, 3, 4, 5]
			>>> a.remove(5)
			>>> a
			[1, 2, 3, 4]
		h、reverse() 将列表中的元素反向存放（改变了列表不会返回值）
			>>> a = [1,2,3]
			>>> a.reverse()
			>>> a
			[3, 2, 1]
		i、sort() 在原位置排序。改变原来的列表。让其中的元素能按一定的顺序排列
			>>> a = [1,4,66,3,77,23,88,55,33,62]
			>>> a.sort()
			>>> a
			[1, 3, 4, 23, 33, 55, 62, 66, 77, 88]

			倒序
			>>> a = [1,4,66,3,77,23,88,55,33,62]
			>>> a.sort(reverse=True)
			>>> a
			[88, 77, 66, 62, 55, 33, 23, 4, 3, 1]

			根据长度排序
			>>> a
			['aaaaa', 'bbbb', 'ccc', 'dd']
			>>> a.sort(key=len)
			>>> a
			['dd', 'ccc', 'bbbb', 'aaaaa']

			通过切片获取一个列表的副本。操作副本不会对原有列表产生影响
			>>> a = [1,4,66,3,77,23,88,55,33,62]
			>>> a
			[1, 4, 66, 3, 77, 23, 88, 55, 33, 62]
			>>> y = a[:]
			>>> y
			[1, 4, 66, 3, 77, 23, 88, 55, 33, 62]
			>>> a
			[1, 4, 66, 3, 77, 23, 88, 55, 33, 62]
			>>> y.sort()
			>>> print y
			[1, 3, 4, 23, 33, 55, 62, 66, 77, 88]
			>>> a
			[1, 4, 66, 3, 77, 23, 88, 55, 33, 62]

			>>> a
			[1, 4, 66, 3, 77, 23, 88, 55, 33, 62]
			>>> y = sorted(a)
			>>> y
			[1, 3, 4, 23, 33, 55, 62, 66, 77, 88]
			>>> a
			[1, 4, 66, 3, 77, 23, 88, 55, 33, 62]


			下面这种就不行了
			>>> a = [1,4,66,3,77,23,88,55,33,62]
			>>> y = a
			>>> y
			[1, 4, 66, 3, 77, 23, 88, 55, 33, 62]
			>>> a
			[1, 4, 66, 3, 77, 23, 88, 55, 33, 62]
			>>> y.sort()
			>>> y
			[1, 3, 4, 23, 33, 55, 62, 66, 77, 88]
			>>> a
			[1, 3, 4, 23, 33, 55, 62, 66, 77, 88]

			总结：返回值的有 pop 和 index

二、元组 tuple
	1、定义（如果只有一个值要加一个逗号）
		a、 >>> a = (1,2,3)
			>>> b = (4)
			>>> b
			4
			>>> b = (4,)
			>>> b
			(4,)
		b、 >>> tuple([4,5,6])
			(4, 5, 6)
			>>> tuple('abc')
			('a', 'b', 'c')
	2、基本操作
			>>> x = 1,2,3
			>>> x
			(1, 2, 3)
			>>> x[1]
			2
			>>> x[0:2]
			(1, 2)
			>>> 
			元组的分片还是元组，就像列表的分片还是列表一样。
	3、常用函数'count', 'index'